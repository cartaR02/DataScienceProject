from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score

from datetime import datetime
feature_list = []
label_list = []
DNAsum = []
RNAsum = []
nonDRNAsum = []
DRNAsum = []
file_name = "sequences_training.txt"
modified_training = "modified_training.txt"
try: 
	with open(modified_training, 'r') as file:

		for line in file:

			DNA,classification = line.split(',')
			dnaLength = len(DNA)
			feature_list.append(DNA)
			classification = classification.strip()
			label_list.append(classification)
			match classification:
				case "DNA":
					DNAsum.append(dnaLength)
				case "RNA":
					RNAsum.append(dnaLength)
				case "nonDRNA":
					nonDRNAsum.append(dnaLength)
				case "DRNA":
					DRNAsum.append(dnaLength)

except FileNotFoundError:
	print(f"Error no file")

nrange_lower = 3
nrange_upper = 9




X_data = feature_list
Y_data = label_list
X_training_set, X_testing_set, Y_training_set, Y_testing_set = train_test_split(X_data, Y_data, test_size=.25, random_state=42)
start = datetime.now()
# build the modal
text_classification_pipeline = Pipeline([
	# Vectorize strings
	('tfidf',TfidfVectorizer(ngram_range=(3,10), analyzer='char')),

	# classifier learns to map nubmers to a label
	#('clf', LogisticRegression(max_iter=1000))
    ('clf', DecisionTreeClassifier(random_state=0))
])

print("Training the modal")
print(f"NLower: {nrange_lower} NUpper: {nrange_upper}")
text_classification_pipeline.fit(X_training_set, Y_training_set)

print("evaluate the modal")
predictions = text_classification_pipeline.predict(X_testing_set)

accuracy = accuracy_score(Y_testing_set, predictions)
print(f"Accuracy on test data: {accuracy * 100:.2f}%")
end = datetime.now()
elapsed = end - start
elapsed_time = str(elapsed).split(".")[0]
print(f"Elapsed Time {elapsed_time}")
# Answers
# sum
# nonDRNA
# nonDRNA
# nonDRNA
# nonDRNA
print("\n---- Making new Predictions --- ")
new_strings = [
	"MAATTENLPQLKSAVDGLTEMSESEKSGFISLVSRYLSGEAQHIEWSKIQTPTDEIVVPYEKMTPVSQDVAETKNLLDKLVVLKLNGGLGTTMGCTGPKSVIEVRDGLTFLDLIVIQIENLNNKYGCKVPLVLMNSFNTHDDTHKIVEKYTNSNVDIHTFNQSKYPRVVADEFVPWPSKGKTDKEGWYPPGHGDVFPALMNSGKLDTFLSQGKEYVFVANSDNLGAIVDLTILKHLIQNKNEYCMEVTPKTLADVKGGTLISYEGKVQLLEIAQVPDEHVNEFKSIEKFKIFNTNNLWVNLKAIKKLVEADALKMEIIPNPKEVDGVKVLQLETAAGAAIRFFDNAIGVNVPRSRFLPVKASSDLLLVQSDLYTLVDGFVTRNKARTNPSNPSIELGPEFKKVATFLSRFKSIPSIVELDSLKVSGDVWFGSSIVLKGKVTVAAKSGVKLEIPDRAVVENKNINGPEDL",
"MLTGLKIAVIGGDARQLEIIRKLTEQQADIYLVGFDQLDHGFTGAVKCNIDEIPFQQIDSIILPVSATTGEGVVSTVFSNEEVVLKQDHLDRTPAHCVIFSGISNAYLENIAAQAKRKLVKLFERDDIAIYNSIPTVEGTIMLAIQHTDYTIHGSQVAVLGLGRTGMTIARTFAALGANVKVGARSSAHLARITEMGLVPFHTDELKEHVKDIDICINTIPSMILNQTVLSSMTPKTLILDLASRPGGTDFKYAEKQGIKALLAPGLPGIVAPKTAGQILANVLSKLLAEIQAEEGK",
"MALEICVKAAVGAPDHLGDCPFSQRALLTLEEKSLTYKIHLINLSDKPQWFLDISPQGKVPVLKIDDKWVTDSDVIVGILEEKYPDPPLKTPAEFASVGSNIFGTFGTFLKSKDSNDGSEHALLVELEALENHLKSHDGPFIAGERVSAVDLSLAPKLYHLQVALGHFKSWSVPESFPHVHNYMKTLFSLDSFEKTKTEEKYVISGWAPKVNP",
"MGWSVNAWSFACKTANGTAIPIGGGSANVYVNLAPVVNVGQNLVVDLSTQIFCHNDYPETITDYVTLQRGSAYGGVLSNFSGTVKYSGSSYPFPTTSETPRVVYNSRTDKPWPVALYLTPVSSAGGVAIKAGSLIAVLILRQTNNYNSDDFQFVWNIYANNDVVVPTGGCDVSARDVTVTLPDYPGSVPIPLTVYCAKSQNLGYYLSGTTADAGNSIFTNTASFSPA",
"MTTDTRRRVKLYALNAERQWDDRGTGHVSSTYVERLKGISLLVRAESDGSLLLESKIQPDTAYQKQQDTLIVWSEGDNFDLALSFQEKAGCDEIWEKICQVQGKDPSVEITQDIVEESEDERFEDMSDTAPPIELPPCELSRLEDISETIQSCLSTPLRKEKLSMALESESYIKKLLNLFHVCEDLDNTEGLHHLFEIFKNIFLLNKNALFEIMFADDTIFDVVGCLEYDPSVSQPKKHRQYLKQLAKFREAVPIKNLDLLAKIHQTFRVQYIQDIILPTPSVFVEDNMLNTLSSFIFFNKVEIVTMIQDDERYLLDVFAVLTDPTTGDAKRRDTVLFLKEFCNYAQNLQPQGKDSFYKTLTCLGILQALELTLVMNDKKTKSASIDILTAIVEFSPLVVRNYTLNQANRPEVERMLLNIAIEQMLNDSEPELGIAVQLMGIVKILLEPENMLTEKGDFLNFFYKYSVQTLVAPVILNTIGDRPQNEDYQTAQLLGIVLDILSFCVEHHSYHIKNFLLQKDLLKRILVLMKSTHTFLVLGALRLLRKIIALKDEFYNRHIVKCNLFAPVVDAFIRNNGRYNLLESAILELFEFIKLEDIRTLCVYFVENFSKIFDEIEYVQTFKYLKNRYDQYQDRLKDRDKMENRTDGGLPIIRSGGRFRRDQRQMEEEEEMWFNEEDDFTEEIDTYNNVMKSVSEKNGPQTQNQQKSSPPHSTSPHSGLLGSLSTTASSTATSATSGAPVASGSSSPEAISADEQTQAAVHLAAAALQHHQQQQQQQQQNPFQQQTQPEIAELQQQLSSVEAPQSQELELSQSAAASASPTSSSSSLEASTSSSSASSSSSSSSSSSPPGSSAAASLCDSATVAAVAASQFLSTIATAMAASVTAAAATNSSPSISPAPAVSSPDIENADAQLPPSDDASSPASGEQDANSTEGTSSEADKTTAKKGLVDYESDSGEDDYEEDEYSEGPQAQKRARQA",
"MSPEKSQEESPEEDTERTERKPMVKDAFKDISIYFTKEEWAEMGDWEKTRYRNVKRNYNALITIGLRATRPAFMCHRRQAIKLQVDDTEDSDEEWTPRQQVKPPWMALRVEQRKHQKGMPKASFSNESSLKELSRTANLLNASGSEQAQKPVSPSGEASTSGQHSRLKLELRKKETERKMYSLRERKGHAYKEVSEPQDDDYLYCEMCQNFFIDSCAAHGPPTFVKDSAVDKGHPNRSALSLPPGLRIGPSGIPQAGLGVWNEASDLPLGLHFGPYEGRITEDEEAANNGYSWLITKGRNCYEYVDGKDKSWANWMRYVNCARDDEEQNLVAFQYHRQIFYRTCRVIRPGCELLVWYGDEYGQELGIKWGSKWKKELMAGREPKPEIHPCPSCCLAFSSQKFLSQHVERNHSSQNFPGPSARKLLQPENPCPGDQNQEQQYPDPHSRNDKTKGQEIKERSKLLNKRTWQREISRAFSSPPKGQMGSCRVGKRIMEEESRTGQKVNPGNTGKLFVGVGISRIAKVKYGECGQGFSVKSDVITHQRTHTGEKLYVCRECGRGFSWKSHLLIHQRIHTGEKPYVCRECGRGFSWQSVLLTHQRTHTGEKPYVCRECGRGFSRQSVLLTHQRRHTGEKPYVCRECGRGFSRQSVLLTHQRRHTGEKPYVCRECGRGFSWQSVLLTHQRTHTGEKPYVCRECGRGFSWQSVLLTHQRTHTGEKPYVCRECGRGFSNKSHLLRHQRTHTGEKPYVCRECGRGFRDKSHLLRHQRTHTGEKPYVCRECGRGFRDKSNLLSHQRTHTGEKPYVCRECGRGFSNKSHLLRHQRTHTGEKPYVCRECGRGFRNKSHLLRHQRTHTGEKPYVCRECGRGFSDRSSLCYHQRTHTGEKPYVCREDE"
]

new_predictions = text_classification_pipeline.predict(new_strings)

for text, label in zip(new_strings, new_predictions):
	print(f"String: '{text}' => Predicted Label: '{label}'")
